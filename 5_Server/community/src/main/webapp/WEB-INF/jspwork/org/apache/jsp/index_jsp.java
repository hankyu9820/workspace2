/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2023-08-25 06:51:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.0.min.js\" integrity=\"sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<title>대기오염 공공데이터</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<h1>실시간 대기오염 정보</h1>\r\n");
      out.write("	\r\n");
      out.write("	<select id=\"location\">\r\n");
      out.write("      <option>서울</option>\r\n");
      out.write("      <option>부산</option>\r\n");
      out.write("      <option>대구</option>\r\n");
      out.write("      <option>인천</option>\r\n");
      out.write("      <option>광주</option>\r\n");
      out.write("      <option>대전</option>\r\n");
      out.write("      <option>울산</option>\r\n");
      out.write("      <option>경기</option>\r\n");
      out.write("      <option>강원</option>\r\n");
      out.write("      <option>충북</option>\r\n");
      out.write("      <option>충남</option>\r\n");
      out.write("      <option>전북</option>\r\n");
      out.write("      <option>전남</option>\r\n");
      out.write("      <option>경북</option>\r\n");
      out.write("      <option>경남</option>\r\n");
      out.write("      <option>제주</option>\r\n");
      out.write("      <option>세종</option>\r\n");
      out.write("   </select>\r\n");
      out.write("   \r\n");
      out.write("   <button id=\"btn1\">해당 지역 대기 오염 정보</button>\r\n");
      out.write("   <br><br>\r\n");
      out.write("   \r\n");
      out.write("   <table border=\"1\" id=\"result1\">\r\n");
      out.write("      <thead>\r\n");
      out.write("         <tr>\r\n");
      out.write("            <th>측정소명</th>\r\n");
      out.write("            <th>측정일시</th>\r\n");
      out.write("            <th>통합대기환경수치</th>\r\n");
      out.write("            <th>미세먼지농도</th>\r\n");
      out.write("            <th>아황산가스농도</th>\r\n");
      out.write("            <th>일산화탄소농도</th>\r\n");
      out.write("            <th>이산화탄소농도</th>\r\n");
      out.write("            <th>오존농도</th>\r\n");
      out.write("         </tr>\r\n");
      out.write("      </thead>\r\n");
      out.write("      <tbody></tbody>\r\n");
      out.write("   </table>\r\n");
      out.write("   \r\n");
      out.write("   <hr>\r\n");
      out.write("   \r\n");
      out.write("   <h1>실시간 지진해일 긴급 대피장소</h1>\r\n");
      out.write("   \r\n");
      out.write("   <button id=\"btn2\">실시간 지진해일 긴급 대피장소 정보</button>\r\n");
      out.write("   <br><br>\r\n");
      out.write("   \r\n");
      out.write("   <table border=\"1\" id=\"result2\">\r\n");
      out.write("      <thead>\r\n");
      out.write("         <tr>\r\n");
      out.write("            <th>시도명</th>\r\n");
      out.write("            <th>시군구명</th>\r\n");
      out.write("            <th>대피지구명</th>\r\n");
      out.write("            <th>대피장소명</th>\r\n");
      out.write("            <th>주소</th>\r\n");
      out.write("            <th>경도</th>\r\n");
      out.write("            <th>위도</th>\r\n");
      out.write("            <th>수용가능인원수</th>\r\n");
      out.write("            <th>대피소 분류명</th>\r\n");
      out.write("         </tr>\r\n");
      out.write("      </thead>\r\n");
      out.write("      <tbody></tbody>\r\n");
      out.write("   </table>\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("   \r\n");
      out.write("   <script>\r\n");
      out.write("   	  $(function() {\r\n");
      out.write("		$(\"#btn1\").click(function() {\r\n");
      out.write("			/* json 형식으로 응답 받을 때\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				\r\n");
      out.write("				url : \"air\",\r\n");
      out.write("				data : {location : $(\"#location\").val()},\r\n");
      out.write("				success : function(data) {\r\n");
      out.write("					//console.log(data);\r\n");
      out.write("					//console.log(data.response.body.items);\r\n");
      out.write("					\r\n");
      out.write("					const itemArr = data.response.body.items;\r\n");
      out.write("					\r\n");
      out.write("					let value = \"\";\r\n");
      out.write("					for(let item of itemArr){\r\n");
      out.write("						//console.log(item);\r\n");
      out.write("						value += \"<tr>\"\r\n");
      out.write("							  +  \"<td>\" + item.stationName + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + item.dataTime + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + item.khaiValue + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + item.pm10Value + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + item.so2Value + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + item.coValue + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + item.no2Value + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + item.o3Value + \"</td>\"\r\n");
      out.write("							  +\"</tr>\"\r\n");
      out.write("					}\r\n");
      out.write("					\r\n");
      out.write("					$(\"#result1 > tbody\").html(value);\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("				}, \r\n");
      out.write("				\r\n");
      out.write("				error : function() {\r\n");
      out.write("					console.log(\"통신 실패\");\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("			}) */\r\n");
      out.write("			\r\n");
      out.write("			// ----------------------------------------------------\r\n");
      out.write("			// 응답 데이터를 xml 형식으로 받을 때\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url : \"air\",\r\n");
      out.write("				data : {location : $(\"#location\").val()},\r\n");
      out.write("				success : function(result){\r\n");
      out.write("					console.log(result);\r\n");
      out.write("					\r\n");
      out.write("					// $('요소명').find(매개변수)\r\n");
      out.write("					// - 기준이 되는 요소의 하위 요소들 중 특성 요소를 찾을 때 사용\r\n");
      out.write("					// - html, xml은 같은 markup language이기 때문에 사용 가능하다.\r\n");
      out.write("					//console.log($(result).find(\"item\"))\r\n");
      out.write("					\r\n");
      out.write("					// xml형식의 응답데이터를 받았을 때\r\n");
      out.write("					// 1. 넘겨받은 데이터를 $() 제이쿼리화 시킨 후\r\n");
      out.write("					//    응답데이터 안에 실제 데이터가 담겨이는 요소 선택\r\n");
      out.write("					const itemArr = $(result).find(\"item\");\r\n");
      out.write("					\r\n");
      out.write("					// 2. 반복문을 통해 실제 데이터가 담긴 요소들에 접근해서 동적으로 요소 만들기\r\n");
      out.write("					let value;\r\n");
      out.write("					itemArr.each(function (index, item){\r\n");
      out.write("						//console.log(item);\r\n");
      out.write("						console.log($(item).find(\"stationName\").text());\r\n");
      out.write("						\r\n");
      out.write("						value += \"<tr>\"\r\n");
      out.write("							  +  \"<td>\" + $(item).find(\"stationName\").text() + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + $(item).find(\"dataTime\").text() + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + $(item).find(\"khaiValue\").text() + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + $(item).find(\"pm10Value\").text() + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + $(item).find(\"so2Value\").text() + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + $(item).find(\"coValue\").text() + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + $(item).find(\"no2Value\").text() + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + $(item).find(\"o3Value\").text() + \"</td>\"\r\n");
      out.write("							  +\"</tr>\"\r\n");
      out.write("					})\r\n");
      out.write("					\r\n");
      out.write("					// 3. 동적으로 만들어낸 요소를 화면에 출력\r\n");
      out.write("					$(\"#result1 > tbody\").html(value);\r\n");
      out.write("					\r\n");
      out.write("				},\r\n");
      out.write("				error : function(){\r\n");
      out.write("					console.log(\"통신 실패\");\r\n");
      out.write("				}\r\n");
      out.write("			})\r\n");
      out.write("		})\r\n");
      out.write("	})	\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("	$(function (){\r\n");
      out.write("		$(\"#btn2\").click(function () {\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url : \"tsunami\",\r\n");
      out.write("				success : function(result){\r\n");
      out.write("					console.log(result);\r\n");
      out.write("					\r\n");
      out.write("					const itemArr = $(result).find(\"row\");\r\n");
      out.write("					\r\n");
      out.write("					// 2. 반복문을 통해 실제 데이터가 담긴 요소들에 접근해서 동적으로 요소 만들기\r\n");
      out.write("					let value;\r\n");
      out.write("					itemArr.each(function (index, item){\r\n");
      out.write("						//console.log(item);\r\n");
      out.write("						console.log($(item).find(\"sido_name\").text());\r\n");
      out.write("						\r\n");
      out.write("						value += \"<tr>\"\r\n");
      out.write("							  +  \"<td>\" + $(item).find(\"sido_name\").text() + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + $(item).find(\"sigungu_name\").text() + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + $(item).find(\"remarks\").text() + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + $(item).find(\"shel_nm\").text() + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + $(item).find(\"address\").text() + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + $(item).find(\"lon\").text() + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + $(item).find(\"lat\").text() + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + $(item).find(\"shel_av\").text() + \"</td>\"\r\n");
      out.write("							  +  \"<td>\" + $(item).find(\"shel_div_type\").text() + \"</td>\"\r\n");
      out.write("							  +\"</tr>\"\r\n");
      out.write("					})\r\n");
      out.write("					\r\n");
      out.write("					// 3. 동적으로 만들어낸 요소를 화면에 출력\r\n");
      out.write("					$(\"#result2 > tbody\").html(value);\r\n");
      out.write("					\r\n");
      out.write("				},\r\n");
      out.write("				error : function(){\r\n");
      out.write("					console.log(\"통신 실패\");\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("			})\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	})\r\n");
      out.write("	\r\n");
      out.write("   \r\n");
      out.write("   </script> \r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
